unit CB.AI.Client.DeepSeek.Types;

interface

uses
  System.SysUtils,
  CB.AI.Client.Types;

{$M+}
type
  // https://api-docs.deepseek.com/api/create-chat-completion

  TDeepSeekFunctionResult = class
  public
    name     : string;
    arguments: string;
  end;

  TDeepSeekMessage = class(TAIMessage)
  public
    reasoning_content: string;
    function_call    : TDeepSeekFunctionResult;
    destructor Destroy; override;
  end;

  TDeepSeekFunction = class
  public
    name       : string;
    description: string;
    parameters : string;
  end;
  end;

  TOpenAIRequest = class(TAIRequest)
  public
    max_tokens : integer;
    stream     : boolean;
    temperature: real;
    [JsonName('functions')]
    functions            : TArray<TDeepSeekFunction>;
    [JsonName('function_call')]
    function_call        : string;
    destructor Destroy; override;
  end;

  TDeepSeekChoice = class
  public
    index        : integer;
    message      : TDeepSeekMessage;
    finish_reason: string;
    destructor Destroy; override;
  end;

  TDeepSeekUsageDetail = class
  public
    reasoning_tokens: integer; // Tokens generated by the model for reasoning.
  end;

  TDeepSeekUsage = class
  public
    prompt_tokens           : integer; // Number of tokens in the prompt. It equals prompt_cache_hit_tokens + prompt_cache_miss_tokens.
    prompt_cache_hit_tokens : integer; // Number of tokens in the prompt that hits the context cache.
    prompt_cache_miss_tokens: integer; // Number of tokens in the prompt that misses the context cache.
    completion_tokens       : integer; // Number of tokens in the generated completion.
    total_tokens            : integer; // Total number of tokens used in the request (prompt + completion).
    completion_tokens_details: TDeepSeekUsageDetail;
    destructor Destroy; override;
  end;

  TDeepSeekResponse = class
  public
    id     : string;
    model  : string;
    choices: TArray<TDeepSeekChoice>;
    usage  : TDeepSeekUsage;
    destructor Destroy; override;
  end;

  TDeepSeekModel = class
  public
    id: string;
  end;

  TDeepSeekModels = class
  public
    data: TArray<TDeepSeekModel>;
    destructor Destroy; override;
  end;

implementation

{ TDeepSeekChoice }

destructor TDeepSeekChoice.Destroy;
begin
  message.Free;
  inherited;
end;

{ TDeepSeekResponse }

destructor TDeepSeekResponse.Destroy;
begin
  for var choice in choices do
    choice.Free;
  usage.Free;
  inherited;
end;

{ TDeepSeekUsage }

destructor TDeepSeekUsage.Destroy;
begin
  FreeAndNil(completion_tokens_details);
  inherited;
end;

{ TDeepSeekModels }

destructor TDeepSeekModels.Destroy;
begin
  for var model in data do
    model.Free;
  inherited;
end;

end.
